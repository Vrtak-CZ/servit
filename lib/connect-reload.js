// Generated by CoffeeScript 1.3.3
(function() {
  var client, debounce, hound, path, socketio, util;

  hound = require('hound');

  path = require('path');

  socketio = require('socket.io');

  util = require('util');

  debounce = function(fn) {
    var timeout;
    timeout = null;
    return function() {
      clearTimeout(timeout);
      return timeout = setTimeout(fn, 20);
    };
  };

  client = "  (function () {    'use strict';    var server = '//%s:%s/';    function listen() {      io.connect(server).on('connect-reload', function () {        document.location.reload(true);      });    }    function load() {      var target = document.getElementsByTagName('script')[0],        script = document.createElement('script');      script.src = server + 'socket.io/socket.io.js';      script.onload = listen;      target.parentNode.insertBefore(script, target.nextSibling);    }    if (typeof io === 'object' && io) {      listen();    }    else {      load();    }  }());";

  module.exports = function(_arg) {
    var address, dir, dog, emit, io, port, reload, server;
    address = _arg.address, dir = _arg.dir, port = _arg.port, server = _arg.server;
    dog = hound.watch(dir);
    io = socketio.listen(server, {
      'log level': 0
    });
    emit = debounce(function() {
      return io.sockets.emit('connect-reload');
    });
    reload = function(file) {
      if (path.basename(file).indexOf('.')) {
        return emit();
      }
    };
    dog.on('create', reload);
    dog.on('change', reload);
    return function(_arg1, res, next) {
      var url;
      url = _arg1.url;
      if (url !== '/connect-reload.js') {
        return next();
      }
      res.setHeader('Content-Type', 'text/javascript');
      return res.end(util.format(client, address, port));
    };
  };

}).call(this);
